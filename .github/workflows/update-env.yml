name: Actualizar .env y reiniciar contenedores

on:
  workflow_dispatch: # Permite ejecutar el workflow manualmente desde la interfaz de GitHub

jobs:
  update_env:
    runs-on: ubuntu-latest
    environment: production
    env:
      VPS_HOST: ${{ secrets.VPS_HOST }}

    steps:
      - name: Conectar al VPS y actualizar archivo .env
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            cd /var/www/sweetq/dashboard
            {
              echo "MONGODB_URI=${{ secrets.MONGODB_URI }}"
              echo "MONGODB_DATABASE=${{ secrets.MONGODB_DATABASE }}"
              echo "MONGODB_USER=${{ secrets.MONGODB_USER }}"
              echo "MONGODB_PASSWORD=\"${{ secrets.MONGODB_PASSWORD }}\""
              echo "MONGODB_AUTH_SOURCE=${{ secrets.MONGODB_AUTH_SOURCE }}"
              echo "INSTAGRAM_USER=${{ secrets.INSTAGRAM_USER }}"
              echo "INSTAGRAM_PASSWORD=${{ secrets.INSTAGRAM_PASSWORD }}"
              echo "INSTAGRAM_CLIENT_ID=${{ secrets.INSTAGRAM_CLIENT_ID }}"
              echo "INSTAGRAM_CLIENT_SECRET=${{ secrets.INSTAGRAM_CLIENT_SECRET }}"
              echo "TOKEN_SECRET=${{ secrets.TOKEN_SECRET }}"
              echo "META_WEBHOOK_TOKEN=${{ secrets.META_WEBHOOK_TOKEN }}"
              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
              echo "ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}"
              echo "API_INSTAGRAM=${{ vars.API_INSTAGRAM }}"
              echo "GRAPH_INSTAGRAM=${{ vars.GRAPH_INSTAGRAM }}"
              echo "API_INSTAGRAM_VERSION=${{ vars.API_INSTAGRAM_VERSION }}"
              echo "NODE_ENV=${{ vars.NODE_ENV }}"
              echo "NEXT_PUBLIC_URL=${{ vars.NEXT_PUBLIC_URL }}"
              echo "NEXT_PUBLIC_API_URI=${{ vars.NEXT_PUBLIC_API_URI }}"
              echo "NEXT_PUBLIC_AWS_REGION=${{ vars.NEXT_PUBLIC_AWS_REGION }}"
              echo "NEXT_PUBLIC_AWS_BUCKET_NAME=${{ vars.NEXT_PUBLIC_AWS_BUCKET_NAME }}"
              echo "NEXT_PUBLIC_META_APP_ID=${{ vars.NEXT_PUBLIC_META_APP_ID }}"
              echo "NEXT_PUBLIC_META_VERSION=${{ vars.NEXT_PUBLIC_META_VERSION }}"
              echo "NEXT_PUBLIC_INSTAGRAM_ID=${{ vars.NEXT_PUBLIC_INSTAGRAM_ID }}"
              echo "NEXT_PUBLIC_INSTAGRAM_USERNAME=${{ vars.NEXT_PUBLIC_INSTAGRAM_USERNAME }}"
              echo "NEXT_PUBLIC_INSTAGRAM_REDIRECT_URI=${{ vars.NEXT_PUBLIC_INSTAGRAM_REDIRECT_URI }}"
            } > .env.production

      - name: Reiniciar contenedores Docker para aplicar cambios
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            cd /var/www/sweetq/dashboard
            docker-compose down
            docker-compose up -d

            # Copiar el nuevo .env.production dentro del contenedor en ejecuci√≥n
            CONTAINER_ID=$(docker ps -q --filter "name=sweetq")
            if [ -n "$CONTAINER_ID" ]; then
              docker cp .env.production $CONTAINER_ID:/app/.env.production
              docker-compose down
              docker-compose up -d
            else
              echo "Unable to find container'sweetq'."
              exit 1
            fi
