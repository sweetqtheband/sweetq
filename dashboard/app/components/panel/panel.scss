@use '@scss/mixins' as *;

.panel {
  position: fixed;
  height: var(--panel-wrapper-height, 100%);
  width: 100%;
  top: var(--panel-wrapper-top, 0);
  opacity: 0;
  transition: opacity 1ms linear 200ms;
  pointer-events: none;
  z-index: 1;

  &.no-overlay {
    width: auto;
  }

  &-wrapper {
    transition: transform 200ms ease-out;
    background-color: var(--light-bg-color);
    border-left: solid 1px var(--border-color);
    position: fixed;
    height: var(--panel-wrapper-height, 100%);
    top: var(--panel-wrapper-top, 0);
  }
  &.right {
    .panel-wrapper {
      transform: translateX(100vw);
    }
  }
  &.left {
    .panel-wrapper {
      transform: translateX(-100vw);
    }
  }
  &-overlay {
    transition: opacity 200ms ease-out;
    pointer-events: none;
    display: block;
    width: 100%;
    height: 100%;
    opacity: 0;
  }

  .panel-wrapper {
    @include breakpoint(mobile) {
      width: 100vw;
    }
    @include breakpoint(tablet) {
      width: 80vw;
    }
    padding: calc(var(--padding) * 4) calc(var(--padding) / 2)
      calc(var(--padding) * 2);

    .action {
      position: fixed;
      top: calc(var(--padding) * 2);
      left: calc(var(--padding) * 2);
      cursor: pointer;
    }
    .close {
      position: fixed;
      top: calc(var(--padding) * 3);
      transform: translateY(-50%);
      right: var(--padding);
      cursor: pointer;
      z-index: 2;
    }

    footer {
      width: calc(100% - calc(var(--padding) * 2));
      position: fixed;
      bottom: 0;
      padding: calc(var(--padding) * 2);
      display: flex;
      align-items: flex-end;
      justify-content: flex-end;
    }
  }

  &.open {
    pointer-events: all;
    opacity: 1;
    transition: opacity 0s linear;

    .panel-wrapper {
      transition: transform 200ms ease-in;
    }
    &.right {
      .panel-wrapper {
        transform: translateX(40vw);
      }
    }
    &.left {
      .panel-wrapper {
        transform: translateX(0vw);
      }
    }
    .panel-overlay {
      transition: opacity 200ms ease-in;
      background-color: var(--dark-bg-color);
      opacity: 0.2;
    }

    &.resizing {
      .panel-wrapper {
        transition: unset;
      }
    }
    .panel-content {
      max-height: calc(var(--full-height) * 0.8);
      .fields {
        overflow-y: auto;
        padding: 0px calc(var(--padding) * 2);
        max-height: calc(var(--full-height) * 0.8);

        @include breakpoint(mobile) {
          max-height: calc(var(--full-height) * 0.8 - 25px);
        }
      }
    }
    @include breakpoint(mobile) {
      &.right {
        .panel-wrapper {
          transform: translateX(var(--panel-right-mobile-transform, 0));
          width: var(--panel-right-mobile-max-width, 100vw);
        }
      }
      &.left {
        .panel-wrapper {
          width: var(--panel-left-mobile-max-width, 100vw);
        }
      }
    }

    @include breakpoint(tablet) {
      &.right {
        .panel-wrapper {
          transform: translateX(var(--panel-right-tablet-transform, 50vw));
          width: var(--panel-right-tablet-max-width, 50vw);
        }
      }

      &.left {
        .panel-wrapper {
          width: var(--panel-left-tablet-max-width, 50vw);
        }
      }
    }

    @include breakpoint(laptop) {
      &.right {
        .panel-wrapper {
          transform: translateX(var(--panel-right-laptop-transform, 40vw));
          width: var(--panel-right-laptop-max-width, 60vw);
        }
      }

      &.left {
        .panel-wrapper {
          width: var(--panel-left-laptop-max-width, 50vw);
        }
      }
    }

    @include from(desktop) {
      &.right {
        .panel-wrapper {
          transform: translateX(var(--panel-right-desktop-transform, 45vw));
          width: var(--panel-right-desktop-max-width, 55vw);
        }
      }
      &.left {
        .panel-wrapper {
          width: var(--panel-left-desktop-max-width, 50vw);
        }
      }
      .fields {
        --webkit-scrollbar {
          display: none;
        }

        &:hover {
          --webkit-scrollbar {
            background: rgba(0, 0, 0, 0.3);
          }
        }
      }
    }

    @include from(widescreen) {
      &.right {
        .panel-wrapper {
          transform: translateX(var(--panel-right-desktop-transform, 60vw));
          width: var(--panel-right-desktop-max-width, 40vw);
        }
      }
    }
  }
}
