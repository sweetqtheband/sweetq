import axios from "./_db";
import { BaseList } from "./_list";
import { FIELD_TYPES } from "../constants";
import { onDelete, onSave } from "./_methods";

export const Types = {
  _id: FIELD_TYPES.HIDDEN,
  name: FIELD_TYPES.TEXT,
};

export const Options = {};

// Fields
const fields = {
  titles: {
    name: 'fields.name',
  },
  types: Types,
  options: Options,
};

let options: Record<string, any>[] = [];

// Get options
const getOptions = async (params: any = {}) => {
  params.limit = 10000;
  return {
    options: [
      ...options,
      ...(await {{entity}}.getAll(params, true)).items.map(
        (item: Record<string, string>) => ({
          id: item._id,
          value: item.name,
        })
      ),
    ],
  };
};

// Get methods
const getMethods = (router?: any) => ({
  onListSave: async (value: string) =>
    onSave({{entity}}, router, { name: value }, {}),
  onSave: async (data: any, files: any) => onSave({{entity}}, router, data, files),
  onDelete: async (ids: string[]) => onDelete({{entity}}, router, ids),
});

export const {{entity}} = {
  ...BaseList(
    axios.create({
      baseURL: `${process.env.NEXT_PUBLIC_API_URI}/{{plural}}`,
    })
  ),
  fields,
  getOptions,
  getMethods,
};
